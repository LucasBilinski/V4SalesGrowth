// ‚úÖ SALES COPILOT ‚Äî PROMPT BUILDER DIN√ÇMICO COM CONTEXTO DE M√ìDULO
// Objetivo: Construir dinamicamente o array de mensagens para o GPT-4 com base no m√≥dulo ativado, hist√≥rico e mensagem do usu√°rio

import { systemPromptSalesCopilot } from "./prompts"
import { detectarModuloPorMensagem } from "./intent-detector"
import type { Message } from "ai"

interface BuildPromptArgs {
  userMessage: string
  history?: Message[]
  customContext?: string // Contexto geral j√° formatado
  planContext?: string // Contexto espec√≠fico do plano de a√ß√£o
}

/**
 * Constr√≥i o array de mensagens para a chamada da IA,
 * detectando a inten√ß√£o e injetando o contexto relevante.
 * @param args Argumentos para a constru√ß√£o do prompt.
 * @returns Um objeto com o array de mensagens e o ID do m√≥dulo detectado.
 */
export function buildSalesCopilotPrompt({
  userMessage,
  history = [],
  customContext = "",
  planContext = "",
}: BuildPromptArgs) {
  const moduleId = detectarModuloPorMensagem(userMessage)

  // Adiciona um contexto priorit√°rio se um m√≥dulo for detectado
  const moduleContext = moduleId
    ? `\n\n---
üì¶ CONTEXTO PRIORIT√ÅRIO: O usu√°rio deseja iniciar ou continuar o m√≥dulo: "${moduleId.toUpperCase()}". Adapte sua resposta para esse m√≥dulo. Ofere√ßa as pr√≥ximas etapas guiadas, seja consultivo e leve o usu√°rio ao objetivo desse m√≥dulo.
---`
    : ""

  // O contexto do plano de a√ß√£o tem prioridade m√°xima quando presente
  const finalContext = planContext || moduleContext

  const personalizedSystemPrompt = `${customContext}${systemPromptSalesCopilot}${finalContext}`

  const promptMessages: Message[] = [
    { role: "system", content: personalizedSystemPrompt },
    ...history,
    { role: "user", content: userMessage },
  ]

  return {
    promptMessages,
    moduleId,
  }
}
